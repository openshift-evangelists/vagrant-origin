#!/usr/bin/env bash
#
# Maintainer: Jorge Morales <jmorales@redhat.com>
#
#
# Functions
. /scripts/base/common_functions

must_run_as_root
load_configuration

##################################
__BUILD_DIR="/go/src/github.com/openshift"
__CONFIG_DIR="/var/lib/origin"
__TESTS_DIR=${__CONFIG_DIR}/tests
__BIN_DIR=${__CONFIG_DIR}/bin
# CONSTANTS
export __VERSION=${__OS_IMAGES_VERSION}
__MASTER_CONFIG="${__CONFIG_DIR}/openshift.local.config/master/master-config.yaml"
__REPO="https://github.com/${__OS_ORIGIN_REPO}/origin.git"
##################################

ORIGIN-Setup(){

   # Modify workflow to install a release or build from source_code
   if [ "${__OS_ACTION}" == "release" ]
   then
     DOWNLOAD-AND-INSTALL-release
   else
     # We clean what we want to redo
     [ "${__OS_ACTION}" = "clean" ]  && clean_source && clean_install
     [ "${__OS_ACTION}" = "build" ]  && clean_target && clean_install
     [ "${__OS_ACTION}" = "config" ] && clean_install

     # This will build
     BUILD
   fi

   # This will configure openshift
   CONFIG
   # Install Origin additional default resources
   ADD-Resources
}


# Clean
clean_source(){
  # Delete the Origin repository previously checked out
  rm -rf ${__BUILD_DIR}
}

# Clean
clean_target(){
  # Delete the Origin repository previously checked out
  rm -rf ${__BUILD_DIR}/origin/_output
  rm -rf ${__CONFIG_DIR}/bin
}

clean_install(){
  echo "[INFO] Deleting old install"
  # Stop origin and delete all containers
  systemctl stop origin > /dev/null 2>&1
  sleep 3
  if [[ "$(docker ps -qa)" != "" ]]
  then
  docker stop $(docker ps -qa)
  docker rm -vf $(docker ps -qa)
  fi

  systemctl stop docker
  # Hack to delete secret volumes in use
  cat /etc/mtab | grep kubernetes | awk '{ print $2}' | xargs umount > /dev/null 2>&1

  # Deleting previous configuration
  rm -rf ${__CONFIG_DIR}/openshift.local.*
  rm -rf ${__CONFIG_DIR}/tests/addons*
  rm -rf ${__CONFIG_DIR}/tests/addons_origin*

  systemctl start docker
}

# Checkout
__checkout(){
  echo "[INFO] No origin source, so let's checkout and build it"
  mkdir -p ${__BUILD_DIR}

  pushd ${__BUILD_DIR}
  echo "[INFO] Cloning $__REPO to specified branch ${__OS_ORIGIN_BRANCH}"

  git clone --single-branch --branch=${__OS_ORIGIN_BRANCH} ${__REPO}
  [ "$?" -ne 0 ] && echo "[ERROR] Error cloning the repository" && exit 1

  [ ! -d ${__BUILD_DIR}/origin ] && echo "[ERROR] There is no source to build. Check that the repo was properly checked out" && exit 1
  popd
}

# Update
__update(){
  pushd ${__BUILD_DIR}/origin
  echo "[INFO] Updating to latest"
  git pull
  popd
}

BUILD(){
  export GOPATH=/go
  export PATH=$PATH:$GOPATH/bin

  # If source is there, we update
  [ -e ${__BUILD_DIR}/origin ] && __update || __checkout

  [ ! -d ${__BUILD_DIR}/origin ] && echo "[ERROR] There is no source to build. Check that the repo was properly checked out" && exit 1

  if [ ! -d ${__BUILD_DIR}/origin/_output ]
  then
    # We build
    cd ${__BUILD_DIR}/origin
    OS_ONLY_BUILD_PLATFORMS=${__OS_ONLY_BUILD_PLATFORMS-} hack/build-go.sh
    # TODO: Test this
    if [ "${__OS_BUILD_IMAGES}" = "true" ]
    then
      hack/build-base-images.sh
      OS_ONLY_BUILD_PLATFORMS=${__OS_ONLY_BUILD_PLATFORMS-} hack/build-release.sh
      hack/build-images.sh
      export __VERSION=$(git rev-parse --short "HEAD^{commit}" 2>/dev/null)
    fi

    # We copy the binaries into the <CONFIG_DIR>/bin and then link them
    mkdir -p ${__CONFIG_DIR}/bin
    pushd ${__BUILD_DIR}/origin/_output/local/bin/linux/amd64/
    for i in `ls *`
    do
      cp -f ${i} ${__CONFIG_DIR}/bin
      ln -s ${__CONFIG_DIR}/bin/${i} /usr/bin/ > /dev/null 2>&1
    done
    popd

    # Add bash completions
    mkdir -p ${__CONFIG_DIR}/bin/bash
    pushd ${__BUILD_DIR}/origin/contrib/completions/bash/
    for i in `ls *`
    do
      cp -f ${i} ${__CONFIG_DIR}/bin/bash
      ln -s ${__CONFIG_DIR}/bin/bash/${i} /etc/bash_completion.d/ > /dev/null 2>&1
    done
    popd
  fi
}

DOWNLOAD-AND-INSTALL-release(){
    # Validate that options are ok, and that requirements are met
    # Download release info
    curl -skL https://api.github.com/repos/${__OS_ORIGIN_REPO}/origin/releases/tags/${__OS_ORIGIN_BRANCH} -o /tmp/origin-release.json
    if [[  $(cat /tmp/origin-release.json | jq '.message') == "\"Not Found\"" ]]
    then
      echo "[ERROR] Release ${__OS_ORIGIN_BRANCH} not found. Instllation will exit now" && exit 1
    else
      echo "[INFO] Release found"
    fi
    # Download the release and extract
    cat /tmp/origin-release.json | jq '.assets[].browser_download_url' | grep "server" | sed -e 's/^"//'  -e 's/"$//' | xargs curl -kL -o /tmp/origin.tar.gz
    [ ! -f /tmp/origin.tar.gz ] && "[ERROR] File not found" && exit 1

    mkdir -p /tmp/origin
    tar -xvzf /tmp/origin.tar.gz -C /tmp/origin

    # We use for images the same version as for release
    export __VERSION=${__OS_ORIGIN_BRANCH}

    # We copy the binaries into the <CONFIG_DIR>/bin and then link them
    mkdir -p ${__CONFIG_DIR}/bin
    __dir=$(find /tmp/origin -name "*origin-server*")
    # Add source-to-image
    curl -skL https://github.com/openshift/source-to-image/releases/download/v1.1.0/source-to-image-v1.1.0-9350cd1-linux-amd64.tar.gz -o /tmp/origin/source-to-image.tar.gz
    tar -xvzf /tmp/origin/source-to-image.tar.gz -C ${__dir}
    pushd ${__dir}
    for i in `ls *`
    do
      mv -f ${i} ${__CONFIG_DIR}/bin
      ln -s ${__CONFIG_DIR}/bin/${i} /usr/bin/ > /dev/null 2>&1
      echo "[INFO] Link created for ${i}"
    done
    popd

    # Add bash completions
    mkdir -p ${__CONFIG_DIR}/bin/bash
    pushd ${__CONFIG_DIR}/bin/bash
    curl -skL https://raw.githubusercontent.com/${__OS_ORIGIN_REPO}/origin/${__OS_ORIGIN_BRANCH}/contrib/completions/bash/oc -o oc
    curl -skL https://raw.githubusercontent.com/${__OS_ORIGIN_REPO}/origin/${__OS_ORIGIN_BRANCH}/contrib/completions/bash/oadm -o oadm
    curl -skL https://raw.githubusercontent.com/${__OS_ORIGIN_REPO}/origin/${__OS_ORIGIN_BRANCH}/contrib/completions/bash/openshift -o openshift
    for i in `ls *`
    do
      echo "[INFO] Adding bash_completion for ${i}"
      ln -s ${__CONFIG_DIR}/bin/bash/${i} /etc/bash_completion.d/ > /dev/null 2>&1
    done
    popd

    # Download clients
    mkdir -p ${__CONFIG_DIR}/bin/clients
    pushd ${__CONFIG_DIR}/bin/clients
    for i in `cat /tmp/origin-release.json | jq '.assets[].browser_download_url' | grep client | sed -e 's/^"//'  -e 's/"$//'`
    do
       echo "[INFO] Downloading client ${i}"
       echo "curl -kL -O ${i}"
       curl -kL -O ${i}
    done
    popd

#    rm -rf /tmp/origin*
    [ ! -e "/usr/bin/openshift" ] && "[ERROR] Openshift could not be properly installed" && exit 1
}

openshift-profile-setup(){
  echo "export CONFIG_DIR=${__CONFIG_DIR}" > /etc/profile.d/openshift.sh
  echo "export MASTER_DIR=${__CONFIG_DIR}/openshift.local.config/master" >> /etc/profile.d/openshift.sh
  echo "export MASTER_KUBECONFIG=${__CONFIG_DIR}/openshift.local.config/master/admin.kubeconfig" >> /etc/profile.d/openshift.sh
  echo "export MASTER_CONFIG=${__MASTER_CONFIG}" >> /etc/profile.d/openshift.sh
  # For install, no need to login
  export KUBECONFIG=${__CONFIG_DIR}/openshift.local.config/master/admin.kubeconfig
  # But root will always be cluster-admin user. No need to login.
  echo "export KUBECONFIG=${__CONFIG_DIR}/openshift.local.config/master/admin.kubeconfig" >> $HOME/.bashrc
}


CONFIG(){
  [ -e ${__MASTER_CONFIG} ] && return 0
  echo "[INFO] Using images version ${__VERSION}"

  openshift-profile-setup

  # Create initial configuration for Origin. This will not start the server.
  openshift start --public-master=${__OS_PUBLIC_IP} \
                  --master=${__OS_PUBLIC_IP} \
                  --etcd-dir=${__CONFIG_DIR}/openshift.local.etcd \
                  --write-config=${__CONFIG_DIR}/openshift.local.config \
                  --volume-dir=${__CONFIG_DIR}/openshift.local.volumes \
                  --images='openshift/origin-${component}:'${__VERSION}
  # We make configuration dir world readable so that a user can use certs if needed
  chmod 666 ${__CONFIG_DIR}/openshift.local.config/master/*

  # Now we need to make some adjustments to the config
  sed -i.orig -e "s/\(.*subdomain:\).*/\1 ${__OS_APPS_DOMAIN}/" ${__MASTER_CONFIG}

  [ ! -d ${__CONFIG_DIR}/openshift.local.config/master ] && echo "[ERROR] There is no master config dir available at ${__CONFIG_DIR}/openshift.local.config/master" && exit 1
  # NOTE: If node name gets configurable, change this check and service file below
  [ ! -d ${__CONFIG_DIR}/openshift.local.config/node-origin ] && echo "[ERROR] There is no node config dir available at ${__CONFIG_DIR}/openshift.local.config/node-origin" && exit 1

  # Create origin service
  cat <<-EOF > /etc/systemd/system/origin.service
  [Unit]
  Description=OpenShift
  After=docker.target network.target

  [Service]
  Type=notify
  EnvironmentFile=-/etc/profile.d/proxy.sh
  ExecStart=/usr/bin/openshift start --master-config=${__CONFIG_DIR}/openshift.local.config/master/master-config.yaml --node-config=${__CONFIG_DIR}/openshift.local.config/node-origin/node-config.yaml --public-master=${__OS_PUBLIC_IP}

  [Install]
  WantedBy=multi-user.target
EOF
  systemctl enable origin
  # Start Origin
  systemctl start origin
}


registry-setup(){
  # Install Registry
  if marker_check "origin.registry"; then
    echo "[INFO] Creating the OpenShift Registry"
    mkdir -p /opt/registry
    chmod 777 /opt/registry

    oc adm policy add-scc-to-user privileged system:serviceaccount:default:registry
    oc adm registry --service-account=registry \
                    --config=${__CONFIG_DIR}/openshift.local.config/master/admin.kubeconfig \
                    --mount-host=/opt/registry \
                    --latest-images="$([ ${__OS_IMAGES_VERSION} = 'latest' ] && echo 'true' || echo 'false')"

    # TODO: Secure the registry (https://docs.openshift.org/latest/install_config/install/docker_registry.html)
    oc expose service docker-registry --hostname "hub.${__OS_PUBLIC_IP}"
    echo "[INFO] Registry is accesible in hub.${__OS_PUBLIC_IP}"

    marker_create "origin.registry"
  fi
}

router-setup(){
  # Install Router
  if marker_check "origin.router"; then
    echo "[INFO] Creating the OpenShift Router"
    oc adm policy add-scc-to-user hostnetwork system:serviceaccount:default:router
    ## Create the router
    oc adm router --create 
                  --service-account=router \
                  --latest-images="$([ ${__OS_IMAGES_VERSION} = 'latest' ] && echo 'true' || echo 'false')"

    marker_create "origin.router"
  fi
}

users-setup(){
     # Add admin as cluster-admin
  if marker_check "origin.users"; then
    echo "[INFO] Creating and configuring users"
    ## Add admin as a cluster-admin
    oc adm policy add-cluster-role-to-user cluster-admin admin

    marker_create "origin.users"
  fi
}

anyuid-setup(){
  # Allow all users to run as anyuid
  if marker_check "origin.anyuid"; then
    echo "[INFO] Creating and configuring users"
    ## Add admin as a cluster-admin
    oc adm policy add-scc-to-group anyuid system:authenticated

    marker_create "origin.anyuid"
  fi
}

cockpit-setup(){
   if marker_check "origin.cockpit"; then
      echo "[INFO] Creating cockpit as administrative project"
      oc adm new-project cockpit
      # Template is made generic, so that __OS_APPS_DOMAIN get's properly replaced if customized
      sed -i.orig -e "s/#ORIGIN_IP#/${__OS_PUBLIC_IP}/g" /scripts/cockpit/cockpit.json
      sed -i.orig -e "s/#COCKPIT_DOMAIN#/cockpit.${__OS_APPS_DOMAIN}/g" /scripts/cockpit/cockpit.json
      oc create -f /scripts/cockpit/cockpit.json -n cockpit
      echo "[INFO] Cockpit is available at http://cockpit.${__OS_APPS_DOMAIN}"

      marker_create "origin.cockpit"
   fi
}

templates-setup(){
  # Installing templates into OpenShift
  if marker_check "origin.templates"; then
    echo "[INFO] Installing Origin templates"

    template_list=(
      # Image streams (Centos7)
      ## SCL: Ruby 2, Ruby 2.2, Node.js 0.10, Perl 5.16, Perl 5.20, PHP 5.5, PHP 5.6, Python 3.4, Python 3.3, Python 2.7)
      ## Databases: Mysql 5.5, Mysql 5.6, PostgreSQL 9.2, PostgreSQL 9.4, Mongodb 2.4, Mongodb 2.6, Jenkins
      ## Wildfly 8.1
      https://raw.githubusercontent.com/openshift/origin/master/examples/image-streams/image-streams-centos7.json
      # DB templates (Centos)
      https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/mongodb-ephemeral-template.json
      https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/mongodb-persistent-template.json
      https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/mysql-ephemeral-template.json
      https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/mysql-persistent-template.json
      https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/postgresql-ephemeral-template.json
      https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/postgresql-persistent-template.json
      # Jenkins (Centos)
      https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/jenkins-ephemeral-template.json
      https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/jenkins-persistent-template.json
      # Node.js (Centos)
      https://raw.githubusercontent.com/openshift/nodejs-ex/master/openshift/templates/nodejs-mongodb.json
      https://raw.githubusercontent.com/openshift/nodejs-ex/master/openshift/templates/nodejs.json
      ## NodeJS S2I image streams (recent releases not covered by SCL)
      https://raw.githubusercontent.com/ryanj/origin-s2i-nodejs/master/image-streams.json
      # Warpdrive-python
      https://raw.githubusercontent.com/GrahamDumpleton/warpdrive/master/openshift/warpdrive-python.json
      # Gitlab
      https://gitlab.com/gitlab-org/omnibus-gitlab/raw/master/docker/openshift-template.json
    )

    for template in ${template_list[@]}; do
      echo "[INFO] Importing template ${template}"
      oc create -f $template -n openshift >/dev/null
    done

    marker_create "origin.templates"
  fi
}

nfs-setup(){
  # Add nfs and some sample NFS mounts and PVs
  if marker_check "origin.nfs"; then
    echo "[INFO] Creating and configuring NFS"

    mkdir -p /nfsvolumes
    chown nfsnobody:nfsnobody /nfsvolumes
    chmod 777 /nfsvolumes

    echo '' > /etc/exports

    # To allow pods to write to remote NFS servers
    setsebool -P virt_use_nfs 1

    # Start and enable nfs
    systemctl start rpcbind nfs-server
    systemctl enable rpcbind nfs-server

    # Activating and simlinking script
    chmod 755 /scripts/nfs/create-nfs-volume
    ln -s /scripts/nfs/create-nfs-volume /usr/local/bin/create-nfs-volume

    echo "[INFO] Creating ${__OS_PV_COUNT} NFS PV"
    for i in $(seq -w 01 ${__OS_PV_COUNT})
    do
       /scripts/nfs/create-nfs-volume "pv${i}" "${__OS_PV_SIZE}" "${__OS_PV_NFS_OPTIONS}"
    done

    marker_create "origin.nfs"
  fi

}

ADD-Resources() {
   . /etc/profile.d/openshift.sh

   registry-setup
   router-setup
   users-setup
   anyuid-setup
   cockpit-setup
   templates-setup
   nfs-setup
}
